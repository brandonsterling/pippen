{"ast":null,"code":"function createAmPmHandler(_ref) {\n  let {\n    amLabel,\n    pmLabel,\n    onChange,\n    nextRef\n  } = _ref;\n  return (value, triggerShift) => {\n    var _a, _b;\n\n    const testRegex = new RegExp(`(^(${amLabel}|${pmLabel})?$)`);\n    const valLower = value.toLowerCase();\n\n    if (valLower === amLabel || valLower === pmLabel) {\n      onChange(valLower);\n      triggerShift && ((_a = nextRef == null ? void 0 : nextRef.current) == null ? void 0 : _a.focus());\n      triggerShift && ((_b = nextRef == null ? void 0 : nextRef.current) == null ? void 0 : _b.select());\n      return;\n    }\n\n    if (!testRegex.test(valLower)) {\n      return;\n    }\n\n    onChange(valLower);\n  };\n}\n\nexport { createAmPmHandler };","map":{"version":3,"mappings":"AAAO,SAASA,iBAAT,OAAoE;EAAA,IAAzC;IAAEC,OAAF;IAAWC,OAAX;IAAoBC,QAApB;IAA8BC;EAA9B,CAAyC;EACzE,OAAO,CAACC,KAAD,EAAQC,YAAR,KAAyB;IAC9B,IAAIC,EAAJ,EAAQC,EAAR;;IACA,MAAMC,SAAS,GAAG,IAAIC,MAAJ,CAAY,MAAKT,OAAQ,IAAGC,OAAQ,MAApC,CAAlB;IACA,MAAMS,QAAQ,GAAGN,KAAK,CAACO,WAAN,EAAjB;;IACA,IAAID,QAAQ,KAAKV,OAAb,IAAwBU,QAAQ,KAAKT,OAAzC,EAAkD;MAChDC,QAAQ,CAACQ,QAAD,CAAR;MACAL,YAAY,KAAK,CAACC,EAAE,GAAGH,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACS,OAAzC,KAAqD,IAArD,GAA4D,KAAK,CAAjE,GAAqEN,EAAE,CAACO,KAAH,EAA1E,CAAZ;MACAR,YAAY,KAAK,CAACE,EAAE,GAAGJ,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACS,OAAzC,KAAqD,IAArD,GAA4D,KAAK,CAAjE,GAAqEL,EAAE,CAACO,MAAH,EAA1E,CAAZ;MACA;IACD;;IACD,IAAI,CAACN,SAAS,CAACO,IAAV,CAAeL,QAAf,CAAL,EAA+B;MAC7B;IACD;;IACDR,QAAQ,CAACQ,QAAD,CAAR;EACD,CAdD;AAeF","names":["createAmPmHandler","amLabel","pmLabel","onChange","nextRef","value","triggerShift","_a","_b","testRegex","RegExp","valLower","toLowerCase","current","focus","select","test"],"sources":["../../../../src/components/TimeInputBase/create-amPm-handler/create-amPm-handler.tsx"],"sourcesContent":["interface CreateAmPmHandler {\n  amLabel: string;\n  pmLabel: string;\n  onChange(value: string): void;\n  nextRef?: React.RefObject<HTMLInputElement>;\n}\n\nexport function createAmPmHandler({ amLabel, pmLabel, onChange, nextRef }: CreateAmPmHandler) {\n  return (value: string, triggerShift: boolean) => {\n    const testRegex = new RegExp(`(^(${amLabel}|${pmLabel})?$)`);\n    const valLower = value.toLowerCase();\n\n    if (valLower === amLabel || valLower === pmLabel) {\n      onChange(valLower);\n      triggerShift && nextRef?.current?.focus();\n      triggerShift && nextRef?.current?.select();\n      return;\n    }\n\n    if (!testRegex.test(valLower)) {\n      return;\n    }\n\n    onChange(valLower);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}