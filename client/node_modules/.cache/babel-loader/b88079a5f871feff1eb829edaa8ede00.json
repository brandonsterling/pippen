{"ast":null,"code":"import { clamp } from '@mantine/hooks';\nimport { padTime } from '../pad-time/pad-time.js';\nimport { allButLastDigit } from './all-but-last-digit/all-but-last-digit.js';\n\nfunction createTimeHandler(_ref) {\n  let {\n    onChange,\n    nextRef,\n    min,\n    max,\n    nextMax\n  } = _ref;\n  return function (value, triggerShift) {\n    let forceTriggerShift = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    var _a, _b;\n\n    const parsed = parseInt(value, 10);\n\n    if (Number.isNaN(parsed)) {\n      return;\n    }\n\n    if (parsed > allButLastDigit(max) || forceTriggerShift) {\n      const lastDigit = parsed % 10;\n      let updatedValue;\n      let carryOver;\n\n      if (parsed > max && nextMax && lastDigit <= allButLastDigit(nextMax)) {\n        updatedValue = padTime(allButLastDigit(parsed).toString());\n        carryOver = padTime(lastDigit.toString());\n      } else {\n        updatedValue = padTime(clamp(parsed, min, max).toString());\n      }\n\n      onChange(updatedValue, carryOver);\n      triggerShift && ((_a = nextRef == null ? void 0 : nextRef.current) == null ? void 0 : _a.focus());\n      triggerShift && ((_b = nextRef == null ? void 0 : nextRef.current) == null ? void 0 : _b.select());\n      return;\n    }\n\n    onChange(parsed.toString());\n  };\n}\n\nexport { createTimeHandler };","map":{"version":3,"mappings":";;;;AAGO,SAASA,iBAAT,OAAqE;EAAA,IAA1C;IAAEC,QAAF;IAAYC,OAAZ;IAAqBC,GAArB;IAA0BC,GAA1B;IAA+BC;EAA/B,CAA0C;EAC1E,OAAO,UAACC,KAAD,EAAQC,YAAR,EAAoD;IAAA,IAA9BC,iBAA8B,uEAAV,KAAU;;IACzD,IAAIC,EAAJ,EAAQC,EAAR;;IACA,MAAMC,MAAM,GAAGC,QAAQ,CAACN,KAAD,EAAQ,EAAR,CAAvB;;IACA,IAAIO,MAAM,CAACC,KAAP,CAAaH,MAAb,CAAJ,EAA0B;MACxB;IACD;;IACD,IAAIA,MAAM,GAAGI,eAAe,CAACX,GAAD,CAAxB,IAAiCI,iBAArC,EAAwD;MACtD,MAAMQ,SAAS,GAAGL,MAAM,GAAG,EAA3B;MACA,IAAIM,YAAJ;MACA,IAAIC,SAAJ;;MACA,IAAIP,MAAM,GAAGP,GAAT,IAAgBC,OAAhB,IAA2BW,SAAS,IAAID,eAAe,CAACV,OAAD,CAA3D,EAAsE;QACpEY,YAAY,GAAGE,OAAO,CAACJ,eAAe,CAACJ,MAAD,CAAf,CAAwBS,QAAxB,EAAD,CAAtB;QACAF,SAAS,GAAGC,OAAO,CAACH,SAAS,CAACI,QAAV,EAAD,CAAnB;MACD,CAHD,MAGO;QACLH,YAAY,GAAGE,OAAO,CAACE,KAAK,CAACV,MAAD,EAASR,GAAT,EAAcC,GAAd,CAAL,CAAwBgB,QAAxB,EAAD,CAAtB;MACD;;MACDnB,QAAQ,CAACgB,YAAD,EAAeC,SAAf,CAAR;MACAX,YAAY,KAAK,CAACE,EAAE,GAAGP,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACoB,OAAzC,KAAqD,IAArD,GAA4D,KAAK,CAAjE,GAAqEb,EAAE,CAACc,KAAH,EAA1E,CAAZ;MACAhB,YAAY,KAAK,CAACG,EAAE,GAAGR,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACoB,OAAzC,KAAqD,IAArD,GAA4D,KAAK,CAAjE,GAAqEZ,EAAE,CAACc,MAAH,EAA1E,CAAZ;MACA;IACD;;IACDvB,QAAQ,CAACU,MAAM,CAACS,QAAP,EAAD,CAAR;EACD,CAtBD;AAuBF","names":["createTimeHandler","onChange","nextRef","min","max","nextMax","value","triggerShift","forceTriggerShift","_a","_b","parsed","parseInt","Number","isNaN","allButLastDigit","lastDigit","updatedValue","carryOver","padTime","toString","clamp","current","focus","select"],"sources":["../../../../src/components/TimeInputBase/create-time-handler/create-time-handler.ts"],"sourcesContent":["import { clamp } from '@mantine/hooks';\nimport { padTime } from '../pad-time/pad-time';\nimport { allButLastDigit } from './all-but-last-digit/all-but-last-digit';\n\ninterface CreateTimeHandler {\n  onChange(value: string, carryOver?: string): void;\n  nextRef?: React.RefObject<HTMLInputElement>;\n  min: number;\n  max: number;\n  nextMax?: number;\n}\n\nexport function createTimeHandler({ onChange, nextRef, min, max, nextMax }: CreateTimeHandler) {\n  return (value: string, triggerShift: boolean, forceTriggerShift = false) => {\n    const parsed = parseInt(value, 10);\n\n    if (Number.isNaN(parsed)) {\n      return;\n    }\n\n    if (parsed > allButLastDigit(max) || forceTriggerShift) {\n      const lastDigit = parsed % 10;\n\n      let updatedValue: string;\n      let carryOver: string | undefined;\n\n      /*\n        Check if it is possible to construct a number that satisfies the following conditions:\n          1. The number starts with the last digit of the current value.\n          2. The number is less than the next field's maximum value constraint.\n      */\n      if (parsed > max && nextMax && lastDigit <= allButLastDigit(nextMax)) {\n        updatedValue = padTime(allButLastDigit(parsed).toString());\n        carryOver = padTime(lastDigit.toString());\n      } else {\n        updatedValue = padTime(clamp(parsed, min, max).toString());\n      }\n\n      onChange(updatedValue, carryOver);\n      triggerShift && nextRef?.current?.focus();\n      triggerShift && nextRef?.current?.select();\n      return;\n    }\n\n    onChange(parsed.toString());\n  };\n}\n"]},"metadata":{},"sourceType":"module"}