{"ast":null,"code":"function getInputOnChange(setValue) {\n  return val => {\n    if (!val) {\n      setValue(val);\n    } else if (typeof val === \"function\") {\n      setValue(val);\n    } else if (typeof val === \"object\" && \"nativeEvent\" in val) {\n      const {\n        currentTarget\n      } = val;\n\n      if (currentTarget instanceof HTMLTextAreaElement) {\n        setValue(currentTarget.value);\n      } else if (currentTarget instanceof HTMLInputElement) {\n        if (currentTarget.type === \"checkbox\") {\n          setValue(currentTarget.checked);\n        } else {\n          setValue(currentTarget.value);\n        }\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\n\nexport { getInputOnChange };","map":{"version":3,"mappings":"AAAO,SAASA,gBAAT,CAA0BC,QAA1B,EAAoC;EACzC,OAAQC,GAAD,IAAS;IACd,IAAI,CAACA,GAAL,EAAU;MACRD,QAAQ,CAACC,GAAD,CAAR;IACD,CAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;MACpCD,QAAQ,CAACC,GAAD,CAAR;IACD,CAFM,MAEA,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,iBAAiBA,GAAhD,EAAqD;MAC1D,MAAM;QAAEC;MAAF,IAAoBD,GAA1B;;MACA,IAAIC,aAAa,YAAYC,mBAA7B,EAAkD;QAChDH,QAAQ,CAACE,aAAa,CAACE,KAAf,CAAR;MACD,CAFD,MAEO,IAAIF,aAAa,YAAYG,gBAA7B,EAA+C;QACpD,IAAIH,aAAa,CAACI,IAAd,KAAuB,UAA3B,EAAuC;UACrCN,QAAQ,CAACE,aAAa,CAACK,OAAf,CAAR;QACD,CAFD,MAEO;UACLP,QAAQ,CAACE,aAAa,CAACE,KAAf,CAAR;QACD;MACF;IACF,CAXM,MAWA;MACLJ,QAAQ,CAACC,GAAD,CAAR;IACD;EACF,CAnBD;AAoBF","names":["getInputOnChange","setValue","val","currentTarget","HTMLTextAreaElement","value","HTMLInputElement","type","checked"],"sources":["../../src/get-input-on-change/get-input-on-change.ts"],"sourcesContent":["export function getInputOnChange<Value>(\n  setValue: (value: Value | ((current: Value) => Value)) => void\n) {\n  return (val: Value | React.ChangeEvent<unknown> | ((current: Value) => Value)) => {\n    if (!val) {\n      setValue(val as Value);\n    } else if (typeof val === 'function') {\n      setValue(val);\n    } else if (typeof val === 'object' && 'nativeEvent' in val) {\n      const { currentTarget } = val;\n      if (currentTarget instanceof HTMLTextAreaElement) {\n        setValue(currentTarget.value as any);\n      } else if (currentTarget instanceof HTMLInputElement) {\n        if (currentTarget.type === 'checkbox') {\n          setValue(currentTarget.checked as any);\n        } else {\n          setValue(currentTarget.value as any);\n        }\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}