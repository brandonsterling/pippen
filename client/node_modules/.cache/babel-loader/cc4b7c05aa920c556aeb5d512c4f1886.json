{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { filterErrors } from './filter-errors/filter-errors.js';\nimport { shouldValidateOnChange } from './validate/should-validate-on-change.js';\nimport { getPath } from './paths/get-path.js';\nimport { setPath } from './paths/set-path.js';\nimport { validateFieldValue } from './validate/validate-field-value.js';\nimport { reorderPath } from './paths/reorder-path.js';\nimport { removePath } from './paths/remove-path.js';\nimport { clearListErrors } from './filter-errors/clear-list-errors.js';\nimport { insertPath } from './paths/insert-path.js';\nimport { validateValues } from './validate/validate-values.js';\nimport { getStatus } from './get-status/get-status.js';\nimport { getInputOnChange } from './get-input-on-change/get-input-on-change.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useForm() {\n  let {\n    initialValues = {},\n    initialErrors = {},\n    initialDirty = {},\n    initialTouched = {},\n    clearInputErrorOnChange = true,\n    validateInputOnChange = false,\n    validate: rules\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [touched, setTouched] = useState(initialTouched);\n  const [dirty, setDirty] = useState(initialDirty);\n  const [values, _setValues] = useState(initialValues);\n  const [errors, _setErrors] = useState(filterErrors(initialErrors));\n  const resetTouched = useCallback(() => setTouched({}), []);\n  const resetDirty = useCallback(() => setDirty({}), []);\n  const setErrors = useCallback(errs => _setErrors(current => filterErrors(typeof errs === \"function\" ? errs(current) : errs)), []);\n  const clearErrors = useCallback(() => _setErrors({}), []);\n  const reset = useCallback(() => {\n    _setValues(initialValues);\n\n    clearErrors();\n    resetDirty();\n    resetTouched();\n  }, []);\n  const setFieldError = useCallback((path, error) => setErrors(current => __spreadProps(__spreadValues({}, current), {\n    [path]: error\n  })), []);\n  const clearFieldError = useCallback(path => setErrors(current => {\n    if (typeof path !== \"string\") {\n      return current;\n    }\n\n    const clone = __spreadValues({}, current);\n\n    delete clone[path];\n    return clone;\n  }), []);\n  const setFieldValue = useCallback((path, value) => {\n    const shouldValidate = shouldValidateOnChange(path, validateInputOnChange);\n\n    _setValues(current => {\n      const initialValue = getPath(path, initialValues);\n      const isFieldDirty = !isEqual(initialValue, value);\n      setDirty(currentDirty => __spreadProps(__spreadValues({}, currentDirty), {\n        [path]: isFieldDirty\n      }));\n      setTouched(currentTouched => __spreadProps(__spreadValues({}, currentTouched), {\n        [path]: true\n      }));\n      const result = setPath(path, value, current);\n\n      if (shouldValidate) {\n        const validationResults = validateFieldValue(path, rules, result);\n        validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n      }\n\n      return result;\n    });\n\n    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);\n  }, []);\n  const setValues = useCallback(payload => {\n    _setValues(payload);\n\n    clearInputErrorOnChange && clearErrors();\n  }, []);\n  const reorderListItem = useCallback((path, payload) => _setValues(current => reorderPath(path, payload, current)), []);\n  const removeListItem = useCallback((path, index) => {\n    _setValues(current => removePath(path, index, current));\n\n    _setErrors(errs => clearListErrors(path, errs));\n  }, []);\n  const insertListItem = useCallback((path, item, index) => _setValues(current => insertPath(path, item, index, current)), []);\n  const validate = useCallback(() => {\n    const results = validateValues(rules, values);\n\n    _setErrors(results.errors);\n\n    return results;\n  }, [values, rules]);\n  const validateField = useCallback(path => {\n    const results = validateFieldValue(path, rules, values);\n    results.hasError ? setFieldError(path, results.error) : clearFieldError(path);\n    return results;\n  }, [values, rules]);\n\n  const getInputProps = function (path) {\n    let {\n      type = \"input\",\n      withError = type === \"input\",\n      withFocus = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const onChange = getInputOnChange(value => setFieldValue(path, value));\n    const payload = {\n      onChange\n    };\n\n    if (withError) {\n      payload.error = errors[path];\n    }\n\n    if (type === \"checkbox\") {\n      payload.checked = getPath(path, values);\n    } else {\n      payload.value = getPath(path, values);\n    }\n\n    if (withFocus) {\n      payload.onFocus = () => setTouched(current => __spreadProps(__spreadValues({}, current), {\n        [path]: true\n      }));\n    }\n\n    return payload;\n  };\n\n  const onSubmit = (handleSubmit, handleValidationFailure) => event => {\n    event.preventDefault();\n    const results = validate();\n\n    if (results.hasErrors) {\n      handleValidationFailure == null ? void 0 : handleValidationFailure(results.errors, values, event);\n    } else {\n      handleSubmit(values, event);\n    }\n  };\n\n  const onReset = useCallback(event => {\n    event.preventDefault();\n    reset();\n  }, []);\n  const isDirty = useCallback(path => getStatus(dirty, path), [dirty]);\n  const isTouched = useCallback(path => getStatus(touched, path), [touched]);\n  return {\n    values,\n    errors,\n    setValues,\n    setErrors,\n    setFieldValue,\n    setFieldError,\n    clearFieldError,\n    clearErrors,\n    reset,\n    validate,\n    validateField,\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    getInputProps,\n    onSubmit,\n    onReset,\n    isDirty,\n    isTouched,\n    setTouched,\n    setDirty,\n    resetTouched,\n    resetDirty\n  };\n}\n\nexport { useForm };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","useForm","initialValues","initialErrors","initialDirty","initialTouched","clearInputErrorOnChange","validateInputOnChange","validate","rules","touched","setTouched","useState","dirty","setDirty","values","_setValues","errors","_setErrors","filterErrors","resetTouched","useCallback","resetDirty","setErrors","errs","current","clearErrors","reset","setFieldError","path","error","clearFieldError","clone","setFieldValue","shouldValidate","shouldValidateOnChange","initialValue","getPath","isFieldDirty","isEqual","currentDirty","currentTouched","result","setPath","validationResults","validateFieldValue","hasError","setValues","payload","reorderListItem","reorderPath","removeListItem","index","removePath","clearListErrors","insertListItem","item","insertPath","results","validateValues","validateField","getInputProps","type","withError","withFocus","onChange","getInputOnChange","checked","onFocus","onSubmit","handleSubmit","handleValidationFailure","event","preventDefault","hasErrors","onReset","isDirty","getStatus","isTouched"],"sources":["../src/use-form.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { getInputOnChange } from './get-input-on-change';\nimport { setPath, reorderPath, insertPath, getPath, removePath } from './paths';\nimport { filterErrors, clearListErrors } from './filter-errors';\nimport { validateValues, validateFieldValue, shouldValidateOnChange } from './validate';\nimport { getStatus } from './get-status';\nimport {\n  UseFormReturnType,\n  UseFormInput,\n  SetErrors,\n  ClearErrors,\n  Reset,\n  SetFieldError,\n  SetFieldValue,\n  SetValues,\n  ReorderListItem,\n  RemoveListItem,\n  InsertListItem,\n  ClearFieldError,\n  Validate,\n  ValidateField,\n  GetInputProps,\n  OnSubmit,\n  OnReset,\n  GetFieldStatus,\n} from './types';\n\nexport function useForm<Values = Record<string, unknown>>({\n  initialValues = {} as Values,\n  initialErrors = {},\n  initialDirty = {},\n  initialTouched = {},\n  clearInputErrorOnChange = true,\n  validateInputOnChange = false,\n  validate: rules,\n}: UseFormInput<Values> = {}): UseFormReturnType<Values> {\n  const [touched, setTouched] = useState(initialTouched);\n  const [dirty, setDirty] = useState(initialDirty);\n  const [values, _setValues] = useState(initialValues);\n  const [errors, _setErrors] = useState(filterErrors(initialErrors));\n\n  const resetTouched = useCallback(() => setTouched({}), []);\n  const resetDirty = useCallback(() => setDirty({}), []);\n\n  const setErrors: SetErrors = useCallback(\n    (errs) =>\n      _setErrors((current) => filterErrors(typeof errs === 'function' ? errs(current) : errs)),\n    []\n  );\n\n  const clearErrors: ClearErrors = useCallback(() => _setErrors({}), []);\n  const reset: Reset = useCallback(() => {\n    _setValues(initialValues);\n    clearErrors();\n    resetDirty();\n    resetTouched();\n  }, []);\n\n  const setFieldError: SetFieldError<Values> = useCallback(\n    (path, error) => setErrors((current) => ({ ...current, [path]: error })),\n    []\n  );\n\n  const clearFieldError: ClearFieldError = useCallback(\n    (path) =>\n      setErrors((current) => {\n        if (typeof path !== 'string') {\n          return current;\n        }\n\n        const clone = { ...current };\n        delete clone[path];\n        return clone;\n      }),\n    []\n  );\n\n  const setFieldValue: SetFieldValue<Values> = useCallback((path, value) => {\n    const shouldValidate = shouldValidateOnChange(path, validateInputOnChange);\n    _setValues((current) => {\n      const initialValue = getPath(path, initialValues);\n      const isFieldDirty = !isEqual(initialValue, value);\n      setDirty((currentDirty) => ({ ...currentDirty, [path]: isFieldDirty }));\n      setTouched((currentTouched) => ({ ...currentTouched, [path]: true }));\n\n      const result = setPath(path, value, current);\n\n      if (shouldValidate) {\n        const validationResults = validateFieldValue(path, rules, result);\n        validationResults.hasError\n          ? setFieldError(path, validationResults.error)\n          : clearFieldError(path);\n      }\n\n      return result;\n    });\n\n    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);\n  }, []);\n\n  const setValues: SetValues<Values> = useCallback((payload) => {\n    _setValues(payload);\n    clearInputErrorOnChange && clearErrors();\n  }, []);\n\n  const reorderListItem: ReorderListItem<Values> = useCallback(\n    (path, payload) => _setValues((current) => reorderPath(path, payload, current)),\n    []\n  );\n\n  const removeListItem: RemoveListItem<Values> = useCallback((path, index) => {\n    _setValues((current) => removePath(path, index, current));\n    _setErrors((errs) => clearListErrors(path, errs));\n  }, []);\n\n  const insertListItem: InsertListItem<Values> = useCallback(\n    (path, item, index) => _setValues((current) => insertPath(path, item, index, current)),\n    []\n  );\n\n  const validate: Validate = useCallback(() => {\n    const results = validateValues(rules, values);\n    _setErrors(results.errors);\n    return results;\n  }, [values, rules]);\n\n  const validateField: ValidateField<Values> = useCallback(\n    (path) => {\n      const results = validateFieldValue(path, rules, values);\n      results.hasError ? setFieldError(path, results.error) : clearFieldError(path);\n      return results;\n    },\n    [values, rules]\n  );\n\n  const getInputProps: GetInputProps<Values> = (\n    path,\n    { type = 'input', withError = type === 'input', withFocus = true } = {}\n  ) => {\n    const onChange = getInputOnChange((value) => setFieldValue(path, value as any));\n    const payload: Record<string, any> = { onChange };\n\n    if (withError) {\n      payload.error = errors[path];\n    }\n\n    if (type === 'checkbox') {\n      payload.checked = getPath(path, values);\n    } else {\n      payload.value = getPath(path, values);\n    }\n\n    if (withFocus) {\n      payload.onFocus = () => setTouched((current) => ({ ...current, [path]: true }));\n    }\n\n    return payload;\n  };\n\n  const onSubmit: OnSubmit<Values> = (handleSubmit, handleValidationFailure) => (event) => {\n    event.preventDefault();\n    const results = validate();\n\n    if (results.hasErrors) {\n      handleValidationFailure?.(results.errors, values, event);\n    } else {\n      handleSubmit(values, event);\n    }\n  };\n\n  const onReset: OnReset = useCallback((event) => {\n    event.preventDefault();\n    reset();\n  }, []);\n\n  const isDirty: GetFieldStatus<Values> = useCallback((path) => getStatus(dirty, path), [dirty]);\n  const isTouched: GetFieldStatus<Values> = useCallback(\n    (path) => getStatus(touched, path),\n    [touched]\n  );\n\n  return {\n    values,\n    errors,\n    setValues,\n    setErrors,\n    setFieldValue,\n    setFieldError,\n    clearFieldError,\n    clearErrors,\n    reset,\n    validate,\n    validateField,\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    getInputProps,\n    onSubmit,\n    onReset,\n    isDirty,\n    isTouched,\n    setTouched,\n    setDirty,\n    resetTouched,\n    resetDirty,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}