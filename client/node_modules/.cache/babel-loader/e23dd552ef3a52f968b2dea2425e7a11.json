{"ast":null,"code":"import { useQueue, randomId } from '@mantine/hooks';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useNotificationsState(_ref) {\n  let {\n    limit\n  } = _ref;\n  const {\n    state,\n    queue,\n    update,\n    cleanQueue\n  } = useQueue({\n    initialValues: [],\n    limit\n  });\n\n  const showNotification = notification => {\n    const id = notification.id || randomId();\n    update(notifications => {\n      if (notification.id && notifications.some(n => n.id === notification.id)) {\n        return notifications;\n      }\n\n      return [...notifications, __spreadProps(__spreadValues({}, notification), {\n        id\n      })];\n    });\n    return id;\n  };\n\n  const updateNotification = notification => update(notifications => {\n    const index = notifications.findIndex(n => n.id === notification.id);\n\n    if (index === -1) {\n      return notifications;\n    }\n\n    const newNotifications = [...notifications];\n    newNotifications[index] = notification;\n    return newNotifications;\n  });\n\n  const hideNotification = id => update(notifications => notifications.filter(notification => {\n    if (notification.id === id) {\n      typeof notification.onClose === \"function\" && notification.onClose(notification);\n      return false;\n    }\n\n    return true;\n  }));\n\n  const clean = () => update(() => []);\n\n  return {\n    notifications: state,\n    queue,\n    showNotification,\n    updateNotification,\n    hideNotification,\n    cleanQueue,\n    clean\n  };\n}\n\nexport default useNotificationsState;","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","useNotificationsState","limit","state","queue","update","cleanQueue","useQueue","initialValues","showNotification","notification","id","randomId","notifications","some","n","updateNotification","index","findIndex","newNotifications","hideNotification","filter","onClose","clean"],"sources":["../../../src/NotificationsProvider/use-notifications-state/use-notifications-state.ts"],"sourcesContent":["import { useQueue, randomId } from '@mantine/hooks';\nimport { NotificationProps } from '../../types';\n\nexport default function useNotificationsState({ limit }: { limit: number }) {\n  const { state, queue, update, cleanQueue } = useQueue<NotificationProps>({\n    initialValues: [],\n    limit,\n  });\n\n  const showNotification = (notification: NotificationProps) => {\n    const id = notification.id || randomId();\n\n    update((notifications) => {\n      if (notification.id && notifications.some((n) => n.id === notification.id)) {\n        return notifications;\n      }\n\n      return [...notifications, { ...notification, id }];\n    });\n\n    return id;\n  };\n\n  const updateNotification = (notification: NotificationProps) =>\n    update((notifications) => {\n      const index = notifications.findIndex((n) => n.id === notification.id);\n\n      if (index === -1) {\n        return notifications;\n      }\n\n      const newNotifications = [...notifications];\n      newNotifications[index] = notification;\n\n      return newNotifications;\n    });\n\n  const hideNotification = (id: string) =>\n    update((notifications) =>\n      notifications.filter((notification) => {\n        if (notification.id === id) {\n          typeof notification.onClose === 'function' && notification.onClose(notification);\n          return false;\n        }\n\n        return true;\n      })\n    );\n\n  const clean = () => update(() => []);\n\n  return {\n    notifications: state,\n    queue,\n    showNotification,\n    updateNotification,\n    hideNotification,\n    cleanQueue,\n    clean,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}